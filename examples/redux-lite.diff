diff -Naur content/package.json redux-lite/package.json
--- content/package.json	2019-11-18 21:15:14.264772750 +0100
+++ redux-lite/package.json	2019-11-18 21:15:31.242485917 +0100
@@ -14,7 +14,9 @@
     "glob": "^7.1.6",
     "intl-ts": "file:../..",
     "react": "^16.12.0",
-    "react-dom": "^16.12.0"
+    "react-dom": "^16.12.0",
+    "react-redux": "^7.1.3",
+    "redux": "^4.0.4"
   },
   "devDependencies": {
     "@types/express": "^4.17.2",
@@ -22,6 +24,7 @@
     "@types/node": "^12.12.8",
     "@types/react": "^16.9.11",
     "@types/react-dom": "^16.9.4",
+    "@types/react-redux": "^7.1.5",
     "@typescript-eslint/eslint-plugin": "^2.7.0",
     "@typescript-eslint/parser": "^2.7.0",
     "eslint": "^6.6.0",
diff -Naur content/src/client/Language.tsx redux-lite/src/client/Language.tsx
--- content/src/client/Language.tsx	2019-11-18 21:19:48.983135633 +0100
+++ redux-lite/src/client/Language.tsx	2019-11-18 21:07:08.993866162 +0100
@@ -2,16 +2,20 @@
 import * as React from 'react'
 // eslint-disable-next-line import/no-duplicates
 import { ChangeEvent, FunctionComponent, useCallback } from 'react'
-import { useLang } from './Store'
+import { useLang, useUpdatePreference } from './Store'
 
 const Language: FunctionComponent = () => {
   const lang = useLang()
+  const updatePreference = useUpdatePreference()
   const languageMap = lang.$languageMap
   const selected = lang.$preferences.length > 0 ? lang.$preferences[0] : lang.$languageMap.default
 
-  const onChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {
-    console.log(event.target.value)
-  }, [])
+  const onChange = useCallback(
+    (event: ChangeEvent<HTMLSelectElement>) => {
+      updatePreference(event.target.value)
+    },
+    [updatePreference]
+  )
 
   return (
     <>
diff -Naur content/src/client/Layout.tsx redux-lite/src/client/Layout.tsx
--- content/src/client/Layout.tsx	2019-11-19 10:20:02.243280348 +0100
+++ redux-lite/src/client/Layout.tsx	2019-11-19 09:12:22.885297530 +0100
@@ -2,11 +2,12 @@
 import * as React from 'react'
 // eslint-disable-next-line import/no-duplicates
 import { FunctionComponent, createElement } from 'react'
+import { Provider } from 'react-redux'
 import Intl from 'intl-ts'
 import Clock from './Clock'
 import Language from './Language'
 import Name from './Name'
-import { Store, StoreProvider } from './Store'
+import { createStore } from './Store'
 import Welcome from './Welcome'
 
 type langType = import('../locale').langType
@@ -17,12 +18,12 @@
 
 const Layout: FunctionComponent<LayoutProps> = ({ lang }) => {
   return (
-    <StoreProvider value={new Store(lang)}>
+    <Provider store={createStore(lang)}>
       <Welcome />
       <Clock />
       <Language />
       <Name />
-    </StoreProvider>
+    </Provider>
   )
 }
 export default Layout
diff -Naur content/src/client/Store.ts redux-lite/src/client/Store.ts
--- content/src/client/Store.ts	2019-11-18 21:18:44.583221883 +0100
+++ redux-lite/src/client/Store.ts	2019-11-19 07:46:35.542222657 +0100
@@ -1,18 +1,81 @@
 import Intl from 'intl-ts'
-import { createContext, useContext } from 'react'
+import { Dispatch, Middleware, applyMiddleware, createStore as createReduxStore } from 'redux'
+import { useSelector, useDispatch } from 'react-redux'
+import { useCallback } from 'react'
+import { eatLanguageData } from './data'
 
 type langType = import('../locale').langType
 
-export class Store {
-  public constructor(public lang: Intl<langType>) {}
+interface StoreState {
+  lang: Intl<langType>
 }
 
-const storeContext = createContext<Store | undefined>(undefined)
-export function useLang(): Intl<langType> {
-  const store = useContext(storeContext)
-  if (!store) {
-    throw new Error('Trying to use store before initialization')
+const UPDATE_PREFERENCE = 'UPDATE_PREFERENCE'
+interface PreferenceAction {
+  type: typeof UPDATE_PREFERENCE
+  preference: string
+}
+function updatePreferences(preference: string): PreferenceAction {
+  return {
+    type: UPDATE_PREFERENCE,
+    preference,
+  }
+}
+
+const UPDATE_LANGUAGE = 'UPDATE_LANGUAGE'
+interface LanguageAction {
+  type: typeof UPDATE_LANGUAGE
+  lang: Intl<langType>
+}
+function updateLanguage(lang: Intl<langType>): LanguageAction {
+  return {
+    type: UPDATE_LANGUAGE,
+    lang,
+  }
+}
+
+type StoreAction = PreferenceAction | LanguageAction
+
+async function loadLanguage(preference: string, next: Dispatch<StoreAction>) {
+  let head = document.head
+  let script = document.createElement('script')
+  script.type = 'text/javascript'
+  script.src = `/lang/${preference}`
+  await new Promise(resolve => {
+    ;(script as any).onreadystatechange = resolve
+    script.onload = resolve
+    head.appendChild(script)
+  })
+  const { preferences, languageMap } = eatLanguageData(script)
+  next(updateLanguage(new Intl(languageMap, preferences)))
+}
+const updateLanguageMiddleware: Middleware = _store => (next: Dispatch<StoreAction>) => (
+  action: StoreAction
+) => {
+  if (action.type === UPDATE_PREFERENCE) {
+    loadLanguage(action.preference, next)
+    return
+  } else {
+    return next(action)
   }
-  return store.lang
 }
-export const StoreProvider = storeContext.Provider
+
+export function createStore(lang: Intl<langType>) {
+  return createReduxStore((state: StoreState = { lang }, action: StoreAction) => {
+    switch (action.type) {
+      case UPDATE_LANGUAGE:
+        return { lang: action.lang }
+      default:
+        return state
+    }
+  }, applyMiddleware(updateLanguageMiddleware))
+}
+
+export function useLang() {
+  return useSelector<StoreState, Intl<langType>>(state => state.lang)
+}
+
+export function useUpdatePreference() {
+  const dispatch = useDispatch<Dispatch<PreferenceAction>>()
+  return useCallback((preference: string) => dispatch(updatePreferences(preference)), [dispatch])
+}
diff -Naur content/src/index.ts redux-lite/src/index.ts
--- content/src/index.ts	2019-11-19 10:26:19.960088089 +0100
+++ redux-lite/src/index.ts	2019-11-19 07:41:08.599281178 +0100
@@ -13,7 +13,9 @@
 const stringifyLanguage = (language: Intl<any>): string =>
   `window.__LANGUAGE__=${JSON.stringify({
     preferences: language.$preferences,
-  }).replace(/</g, '\\u003c')}; window.__LANGUAGE__.languageMap=${language.$languageMap.toString()}`
+  }).replace(/</g, '\\u003c')}; window.__LANGUAGE__.languageMap=${language.$languageMap.toString(
+    language.$preferences
+  )}`
 
 function calculatePreferredLanguages(languages?: string | string[]): string[] {
   let preferred: string[] = []
@@ -35,6 +37,10 @@
   const preload = stringifyLanguage(reqLang)
   res.status(200).send(content(htmlContent, preload))
 })
+app.get('/lang/:code', (req, res) => {
+  const reqLang = new Intl(lang, [req.params.code])
+  res.status(200).send(stringifyLanguage(reqLang))
+})
 
 app.get('/client', (_req, res) => {
   res.status(200).sendFile(__dirname + '/bundle.js')
